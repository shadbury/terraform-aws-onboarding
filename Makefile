#!/usr/bin/env make
include Makehelp

# Backend Configuration
BACKEND_BUCKET = $(backend_bucket_prefix)-terraform-backend
BACKEND_KEY = $(TERRAFORM_ROOT_MODULE)
BACKEND_REGION = ap-southeast-2
BACKEND_PROFILE = $(backend_profile)

BACKEND_CONFIG = -backend-config="bucket=${BACKEND_BUCKET}" -backend-config="key=${BACKEND_KEY}" -backend-config="region=${BACKEND_REGION}" -backend-config="profile=${BACKEND_PROFILE}" -backend-config="encrypt=true"

# Targets
# This init target is only used when first deploying the backend. It should be commented out once the backend exists.
# Initialise Terraform
# init: .env
# 	docker-compose run --rm envvars ensure --tags terraform-init
# 	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform init'
# .PHONY: init

## Initialise Terraform
init: .env
	docker-compose run --rm envvars ensure --tags terraform-init
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform init ${BACKEND_CONFIG}'
.PHONY: init

## Initialise Terraform but also upgrade modules/providers
upgrade: .env init
	docker-compose run --rm envvars ensure --tags terraform-init
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform init -upgrade ${BACKEND_CONFIG}'
.PHONY: upgrade

## Generate a plan
plan: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform plan'
.PHONY: plan

## Generate a plan and save it to the root of the repository. This should be used by CICD systems
planAuto: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform plan -out ../${TERRAFORM_ROOT_MODULE}-${TERRAFORM_WORKSPACE}.tfplan'
.PHONY: planAuto

## Generate a plan and apply it
apply: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform apply'
.PHONY: apply

## Apply the plan generated by planAuto. This should be used by CICD systems
applyAuto: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform apply -auto-approve ../${TERRAFORM_ROOT_MODULE}-${TERRAFORM_WORKSPACE}.tfplan'
.PHONY: applyAuto

## Destroy resources
destroy: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform destroy'
.PHONY: destroy

## Show the statefile
show: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform show'
.PHONY: show

## Show root module outputs
output: .env init workspace
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform output'
.PHONY: output

## Switch to specified workspace
workspace: .env
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd $(TERRAFORM_ROOT_MODULE); terraform workspace select $(TERRAFORM_WORKSPACE) || terraform workspace new $(TERRAFORM_WORKSPACE)'
.PHONY: workspace

## Validate terraform is syntactically correct
validate: .env init
	docker-compose run --rm envvars ensure --tags terraform
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform validate'
.PHONY: validate

## Format all Terraform files
format: .env
	docker-compose run --rm terraform-utils terraform fmt -diff -recursive
.PHONY: format

## Interacticely launch a shell in the Terraform docker container
shell: .env
	docker-compose run --rm terraform-utils sh
.PHONY: shell

## Generate Docker env file
.env:
	touch .env
	docker-compose run --rm envvars validate
	docker-compose run --rm envvars envfile --overwrite
.PHONY: .env

import: .env init workspace
	docker-compose run --rm envvars ensure
	docker-compose run --rm terraform-utils sh -c 'cd ${TERRAFORM_ROOT_MODULE}; terraform state rm aws_vpc_peering_connection.mgmt'
.PHONY: import